// Generated by make_js.py in antlr4-autosuggest project.
const autosuggest = require('../autosuggest');
const r__Q_AB_Q__Q_CD_Q_Lexer = require('./testGrammars/r__Q_AB_Q__Q_CD_Q_Lexer');
const r__Q_AB_Q__Q_CD_Q_Parser = require('./testGrammars/r__Q_AB_Q__Q_CD_Q_Parser');
const r__Q_ABC_Q_Lexer = require('./testGrammars/r__Q_ABC_Q_Lexer');
const r__Q_ABC_Q_Parser = require('./testGrammars/r__Q_ABC_Q_Parser');
const r__LPAR__Q_AB_Q__RPAR__LPAR__Q_CD_Q__RPAR_Lexer = require('./testGrammars/r__LPAR__Q_AB_Q__RPAR__LPAR__Q_CD_Q__RPAR_Lexer');
const r__LPAR__Q_AB_Q__RPAR__LPAR__Q_CD_Q__RPAR_Parser = require('./testGrammars/r__LPAR__Q_AB_Q__RPAR__LPAR__Q_CD_Q__RPAR_Parser');
const r__Q_A_Q__QUES__Q_B_Q_Lexer = require('./testGrammars/r__Q_A_Q__QUES__Q_B_Q_Lexer');
const r__Q_A_Q__QUES__Q_B_Q_Parser = require('./testGrammars/r__Q_A_Q__QUES__Q_B_Q_Parser');
const r__Q_A_Q___Q_B_Q_Lexer = require('./testGrammars/r__Q_A_Q___Q_B_Q_Lexer');
const r__Q_A_Q___Q_B_Q_Parser = require('./testGrammars/r__Q_A_Q___Q_B_Q_Parser');
const r__Q_A_Q__Q_B_Q__QUES_Lexer = require('./testGrammars/r__Q_A_Q__Q_B_Q__QUES_Lexer');
const r__Q_A_Q__Q_B_Q__QUES_Parser = require('./testGrammars/r__Q_A_Q__Q_B_Q__QUES_Parser');
const r_a_b_a__Q_A_Q__b__Q_B_Q_Lexer = require('./testGrammars/r_a_b_a__Q_A_Q__b__Q_B_Q_Lexer');
const r_a_b_a__Q_A_Q__b__Q_B_Q_Parser = require('./testGrammars/r_a_b_a__Q_A_Q__b__Q_B_Q_Parser');
const r_A_A__A_E_Lexer = require('./testGrammars/r_A_A__A_E_Lexer');
const r_A_A__A_E_Parser = require('./testGrammars/r_A_A__A_E_Parser');
const r_A_A__A_E__Q_X_Q_Lexer = require('./testGrammars/r_A_A__A_E__Q_X_Q_Lexer');
const r_A_A__A_E__Q_X_Q_Parser = require('./testGrammars/r_A_A__A_E__Q_X_Q_Parser');
const r_A_A__Q_AB_Q__C_E__Q_X_Q_Lexer = require('./testGrammars/r_A_A__Q_AB_Q__C_E__Q_X_Q_Lexer');
const r_A_A__Q_AB_Q__C_E__Q_X_Q_Parser = require('./testGrammars/r_A_A__Q_AB_Q__C_E__Q_X_Q_Parser');
const r_A_A__Q_A_Q__B_C__D_E_Lexer = require('./testGrammars/r_A_A__Q_A_Q__B_C__D_E_Lexer');
const r_A_A__Q_A_Q__B_C__D_E_Parser = require('./testGrammars/r_A_A__Q_A_Q__B_C__D_E_Parser');
const r_A_A__A_B__C_D__E_F_Lexer = require('./testGrammars/r_A_A__A_B__C_D__E_F_Lexer');
const r_A_A__A_B__C_D__E_F_Parser = require('./testGrammars/r_A_A__A_B__C_D__E_F_Parser');
const r_A_fragmentA__A_Z_Lexer = require('./testGrammars/r_A_fragmentA__A_Z_Lexer');
const r_A_fragmentA__A_Z_Parser = require('./testGrammars/r_A_fragmentA__A_Z_Parser');
const r__Q_A_Q__Q_B_Q__WS___BS_t__ARRW_skipLexer = require('./testGrammars/r__Q_A_Q__Q_B_Q__WS___BS_t__ARRW_skipLexer');
const r__Q_A_Q__Q_B_Q__WS___BS_t__ARRW_skipParser = require('./testGrammars/r__Q_A_Q__Q_B_Q__WS___BS_t__ARRW_skipParser');
const r_A_A__Q_A_Q__STAR_Lexer = require('./testGrammars/r_A_A__Q_A_Q__STAR_Lexer');
const r_A_A__Q_A_Q__STAR_Parser = require('./testGrammars/r_A_A__Q_A_Q__STAR_Parser');
const r_A_A__Q_A_Q__PLUS_Lexer = require('./testGrammars/r_A_A__Q_A_Q__PLUS_Lexer');
const r_A_A__Q_A_Q__PLUS_Parser = require('./testGrammars/r_A_A__Q_A_Q__PLUS_Parser');
const r_A_A__Q_A_Q__Q_B_Q__STAR__Q_C_Q_Lexer = require('./testGrammars/r_A_A__Q_A_Q__Q_B_Q__STAR__Q_C_Q_Lexer');
const r_A_A__Q_A_Q__Q_B_Q__STAR__Q_C_Q_Parser = require('./testGrammars/r_A_A__Q_A_Q__Q_B_Q__STAR__Q_C_Q_Parser');
const r_A_A__Q_A_Q__Q_B_Q__PLUS__Q_C_Q_Lexer = require('./testGrammars/r_A_A__Q_A_Q__Q_B_Q__PLUS__Q_C_Q_Lexer');
const r_A_A__Q_A_Q__Q_B_Q__PLUS__Q_C_Q_Parser = require('./testGrammars/r_A_A__Q_A_Q__Q_B_Q__PLUS__Q_C_Q_Parser');
const r__Q_A_Q_B_fragmentB__Q_B_Q_Lexer = require('./testGrammars/r__Q_A_Q_B_fragmentB__Q_B_Q_Lexer');
const r__Q_A_Q_B_fragmentB__Q_B_Q_Parser = require('./testGrammars/r__Q_A_Q_B_fragmentB__Q_B_Q_Parser');
const r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q_Lexer = require('./testGrammars/r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q_Lexer');
const r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q_Parser = require('./testGrammars/r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q_Parser');
const r0_r1_r2_r1__Q_AB_Q__r2__Q_AC_Q_Lexer = require('./testGrammars/r0_r1_r2_r1__Q_AB_Q__r2__Q_AC_Q_Lexer');
const r0_r1_r2_r1__Q_AB_Q__r2__Q_AC_Q_Parser = require('./testGrammars/r0_r1_r2_r1__Q_AB_Q__r2__Q_AC_Q_Parser');
const r0__Q_A_Q__Q_B_Q_Lexer = require('./testGrammars/r0__Q_A_Q__Q_B_Q_Lexer');
const r0__Q_A_Q__Q_B_Q_Parser = require('./testGrammars/r0__Q_A_Q__Q_B_Q_Parser');
const r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q__Q_EF_Q_Lexer = require('./testGrammars/r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q__Q_EF_Q_Lexer');
const r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q__Q_EF_Q_Parser = require('./testGrammars/r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q__Q_EF_Q_Parser');
const r0_r1_PLUS__r1__Q_ABC_Q___Q_ABCDE_Q_Lexer = require('./testGrammars/r0_r1_PLUS__r1__Q_ABC_Q___Q_ABCDE_Q_Lexer');
const r0_r1_PLUS__r1__Q_ABC_Q___Q_ABCDE_Q_Parser = require('./testGrammars/r0_r1_PLUS__r1__Q_ABC_Q___Q_ABCDE_Q_Parser');
const r0_r1_PLUS__r1__Q_ABC_Q___Q_XYZ_Q_Lexer = require('./testGrammars/r0_r1_PLUS__r1__Q_ABC_Q___Q_XYZ_Q_Lexer');
const r0_r1_PLUS__r1__Q_ABC_Q___Q_XYZ_Q_Parser = require('./testGrammars/r0_r1_PLUS__r1__Q_ABC_Q___Q_XYZ_Q_Parser');
const r_FFFED_C__Q_c_Q__D__Q_d_Q__E__Q_e_Q__F__Q_f_Q_Lexer = require('./testGrammars/r_FFFED_C__Q_c_Q__D__Q_d_Q__E__Q_e_Q__F__Q_f_Q_Lexer');
const r_FFFED_C__Q_c_Q__D__Q_d_Q__E__Q_e_Q__F__Q_f_Q_Parser = require('./testGrammars/r_FFFED_C__Q_c_Q__D__Q_d_Q__E__Q_e_Q__F__Q_f_Q_Parser');
const r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_skipLexer = require('./testGrammars/r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_skipLexer');
const r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_skipParser = require('./testGrammars/r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_skipParser');
const r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_channel_LPAR_HIDDEN_RPAR_Lexer = require('./testGrammars/r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_channel_LPAR_HIDDEN_RPAR_Lexer');
const r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_channel_LPAR_HIDDEN_RPAR_Parser = require('./testGrammars/r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_channel_LPAR_HIDDEN_RPAR_Parser');
const varDecl_typeID_Q___Q_NUMBER_Q___Q__type__Q_float_Q___Q_int_Q__ID_LETTER_LPAR_LETTER__0_9__RPAR__STAR__fragmentLETTER__a_zA_Z__NUMBER_DIGIT_PLUS__fragmentDIGIT__0_9__SPACES___BS_u000B_BS_t_BS_r_BS_n__ARRW_channel_LPAR_HIDDEN_RPAR_Lexer = require('./testGrammars/varDecl_typeID_Q___Q_NUMBER_Q___Q__type__Q_float_Q___Q_int_Q__ID_LETTER_LPAR_LETTER__0_9__RPAR__STAR__fragmentLETTER__a_zA_Z__NUMBER_DIGIT_PLUS__fragmentDIGIT__0_9__SPACES___BS_u000B_BS_t_BS_r_BS_n__ARRW_channel_LPAR_HIDDEN_RPAR_Lexer');
const varDecl_typeID_Q___Q_NUMBER_Q___Q__type__Q_float_Q___Q_int_Q__ID_LETTER_LPAR_LETTER__0_9__RPAR__STAR__fragmentLETTER__a_zA_Z__NUMBER_DIGIT_PLUS__fragmentDIGIT__0_9__SPACES___BS_u000B_BS_t_BS_r_BS_n__ARRW_channel_LPAR_HIDDEN_RPAR_Parser = require('./testGrammars/varDecl_typeID_Q___Q_NUMBER_Q___Q__type__Q_float_Q___Q_int_Q__ID_LETTER_LPAR_LETTER__0_9__RPAR__STAR__fragmentLETTER__a_zA_Z__NUMBER_DIGIT_PLUS__fragmentDIGIT__0_9__SPACES___BS_u000B_BS_t_BS_r_BS_n__ARRW_channel_LPAR_HIDDEN_RPAR_Parser');
const a_b_aa_b__Q_B_Q_Lexer = require('./testGrammars/a_b_aa_b__Q_B_Q_Lexer');
const a_b_aa_b__Q_B_Q_Parser = require('./testGrammars/a_b_aa_b__Q_B_Q_Parser');
const r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Lexer = require('./testGrammars/r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Lexer');
const r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Parser = require('./testGrammars/r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Parser');
const r_AB_QUES_EOF_A__Q_A_Q__B__Q_B_Q_Lexer = require('./testGrammars/r_AB_QUES_EOF_A__Q_A_Q__B__Q_B_Q_Lexer');
const r_AB_QUES_EOF_A__Q_A_Q__B__Q_B_Q_Parser = require('./testGrammars/r_AB_QUES_EOF_A__Q_A_Q__B__Q_B_Q_Parser');


describe('Autosuggest', function () {
    let completions;
    let storedLexerCtr;
    let storedParserCtr;
    let storedCasePreference;

    const givenGrammar = function (lexerCtr, parserCtr) {
        storedLexerCtr = lexerCtr;
        storedParserCtr = parserCtr;
    };
    const withCasePreference = function(casePreference) {
        storedCasePreference = casePreference;
    };
    const whenInput = function (input) {
        let suggester = autosuggest.autosuggester(storedLexerCtr, storedParserCtr, storedCasePreference);
        completions = suggester.autosuggest(input);
    };
    const thenExpect = function (expectedSuggestions) {
        expect(completions.sort()).toEqual(expectedSuggestions.sort());
    };

    it('should handle grammar "r: \'AB\' \'CD\';" with input ""', function () {
        givenGrammar(r__Q_AB_Q__Q_CD_Q_Lexer.r__Q_AB_Q__Q_CD_Q_Lexer, r__Q_AB_Q__Q_CD_Q_Parser.r__Q_AB_Q__Q_CD_Q_Parser);
        whenInput('');
        thenExpect(["AB"]);
    });

    it('should handle grammar "r: \'ABC\';" with input "AB"', function () {
        givenGrammar(r__Q_ABC_Q_Lexer.r__Q_ABC_Q_Lexer, r__Q_ABC_Q_Parser.r__Q_ABC_Q_Parser);
        whenInput('AB');
        thenExpect(["C"]);
    });

    it('should handle grammar "r: \'AB\' \'CD\';" with input "AB"', function () {
        givenGrammar(r__Q_AB_Q__Q_CD_Q_Lexer.r__Q_AB_Q__Q_CD_Q_Lexer, r__Q_AB_Q__Q_CD_Q_Parser.r__Q_AB_Q__Q_CD_Q_Parser);
        whenInput('AB');
        thenExpect(["CD"]);
    });

    it('should handle grammar "r: \'AB\' \'CD\';" with input "ABC"', function () {
        givenGrammar(r__Q_AB_Q__Q_CD_Q_Lexer.r__Q_AB_Q__Q_CD_Q_Lexer, r__Q_AB_Q__Q_CD_Q_Parser.r__Q_AB_Q__Q_CD_Q_Parser);
        whenInput('ABC');
        thenExpect(["D"]);
    });

    it('should handle grammar "r: \'AB\' \'CD\';" with input "A"', function () {
        givenGrammar(r__Q_AB_Q__Q_CD_Q_Lexer.r__Q_AB_Q__Q_CD_Q_Lexer, r__Q_AB_Q__Q_CD_Q_Parser.r__Q_AB_Q__Q_CD_Q_Parser);
        whenInput('A');
        thenExpect(["B"]);
    });

    it('should handle grammar "r: \'AB\' \'CD\';" with input "ABCD"', function () {
        givenGrammar(r__Q_AB_Q__Q_CD_Q_Lexer.r__Q_AB_Q__Q_CD_Q_Lexer, r__Q_AB_Q__Q_CD_Q_Parser.r__Q_AB_Q__Q_CD_Q_Parser);
        whenInput('ABCD');
        thenExpect([]);
    });

    it('should handle grammar "r: \'AB\' \'CD\';" with input "ABD"', function () {
        givenGrammar(r__Q_AB_Q__Q_CD_Q_Lexer.r__Q_AB_Q__Q_CD_Q_Lexer, r__Q_AB_Q__Q_CD_Q_Parser.r__Q_AB_Q__Q_CD_Q_Parser);
        whenInput('ABD');
        thenExpect([]);
    });

    it('should handle grammar "r: (\'AB\') (\'CD\');" with input "AB"', function () {
        givenGrammar(r__LPAR__Q_AB_Q__RPAR__LPAR__Q_CD_Q__RPAR_Lexer.r__LPAR__Q_AB_Q__RPAR__LPAR__Q_CD_Q__RPAR_Lexer, r__LPAR__Q_AB_Q__RPAR__LPAR__Q_CD_Q__RPAR_Parser.r__LPAR__Q_AB_Q__RPAR__LPAR__Q_CD_Q__RPAR_Parser);
        whenInput('AB');
        thenExpect(["CD"]);
    });

    it('should handle grammar "r: \'A\'? \'B\';" with input ""', function () {
        givenGrammar(r__Q_A_Q__QUES__Q_B_Q_Lexer.r__Q_A_Q__QUES__Q_B_Q_Lexer, r__Q_A_Q__QUES__Q_B_Q_Parser.r__Q_A_Q__QUES__Q_B_Q_Parser);
        whenInput('');
        thenExpect(["A", "B"]);
    });

    it('should handle grammar "r: \'A\' | \'B\';" with input ""', function () {
        givenGrammar(r__Q_A_Q___Q_B_Q_Lexer.r__Q_A_Q___Q_B_Q_Lexer, r__Q_A_Q___Q_B_Q_Parser.r__Q_A_Q___Q_B_Q_Parser);
        whenInput('');
        thenExpect(["A", "B"]);
    });

    it('should handle grammar "r: \'A\' \'B\'?;" with input "A"', function () {
        givenGrammar(r__Q_A_Q__Q_B_Q__QUES_Lexer.r__Q_A_Q__Q_B_Q__QUES_Lexer, r__Q_A_Q__Q_B_Q__QUES_Parser.r__Q_A_Q__Q_B_Q__QUES_Parser);
        whenInput('A');
        thenExpect(["B"]);
    });

    it('should handle grammar "r: a | b; a: \'A\'; b: \'B\';" with input ""', function () {
        givenGrammar(r_a_b_a__Q_A_Q__b__Q_B_Q_Lexer.r_a_b_a__Q_A_Q__b__Q_B_Q_Lexer, r_a_b_a__Q_A_Q__b__Q_B_Q_Parser.r_a_b_a__Q_A_Q__b__Q_B_Q_Parser);
        whenInput('');
        thenExpect(["A", "B"]);
    });

    it('should handle grammar "r: A; A: [A-E];" with input ""', function () {
        givenGrammar(r_A_A__A_E_Lexer.r_A_A__A_E_Lexer, r_A_A__A_E_Parser.r_A_A__A_E_Parser);
        whenInput('');
        thenExpect(["A", "B", "C", "D", "E"]);
    });

    it('should handle grammar "r: A; A: [A-E] \'X\';" with input "C"', function () {
        givenGrammar(r_A_A__A_E__Q_X_Q_Lexer.r_A_A__A_E__Q_X_Q_Lexer, r_A_A__A_E__Q_X_Q_Parser.r_A_A__A_E__Q_X_Q_Parser);
        whenInput('C');
        thenExpect(["X"]);
    });

    it('should handle grammar "r: A; A: \'AB\' [C-E] \'X\';" with input "AB"', function () {
        givenGrammar(r_A_A__Q_AB_Q__C_E__Q_X_Q_Lexer.r_A_A__Q_AB_Q__C_E__Q_X_Q_Lexer, r_A_A__Q_AB_Q__C_E__Q_X_Q_Parser.r_A_A__Q_AB_Q__C_E__Q_X_Q_Parser);
        whenInput('AB');
        thenExpect(["CX", "DX", "EX"]);
    });

    it('should handle grammar "r: A; A: \'A\' [B-C] [D-E];" with input "AB"', function () {
        givenGrammar(r_A_A__Q_A_Q__B_C__D_E_Lexer.r_A_A__Q_A_Q__B_C__D_E_Lexer, r_A_A__Q_A_Q__B_C__D_E_Parser.r_A_A__Q_A_Q__B_C__D_E_Parser);
        whenInput('AB');
        thenExpect(["D", "E"]);
    });

    it('should handle grammar "r: A; A: [A-B] [C-D] [E-F];" with input "AD"', function () {
        givenGrammar(r_A_A__A_B__C_D__E_F_Lexer.r_A_A__A_B__C_D__E_F_Lexer, r_A_A__A_B__C_D__E_F_Parser.r_A_A__A_B__C_D__E_F_Parser);
        whenInput('AD');
        thenExpect(["E", "F"]);
    });

    it('should handle grammar "r: A; fragment A: [A-Z];" with input ""', function () {
        givenGrammar(r_A_fragmentA__A_Z_Lexer.r_A_fragmentA__A_Z_Lexer, r_A_fragmentA__A_Z_Parser.r_A_fragmentA__A_Z_Parser);
        whenInput('');
        thenExpect([]);
    });

    it('should handle grammar "r: \'A\' \'B\'; WS: [ \\t] -> skip;" with input "A "', function () {
        givenGrammar(r__Q_A_Q__Q_B_Q__WS___BS_t__ARRW_skipLexer.r__Q_A_Q__Q_B_Q__WS___BS_t__ARRW_skipLexer, r__Q_A_Q__Q_B_Q__WS___BS_t__ARRW_skipParser.r__Q_A_Q__Q_B_Q__WS___BS_t__ARRW_skipParser);
        whenInput('A ');
        thenExpect(["B"]);
    });

    it('should handle grammar "r: \'A\' \'B\'; WS: [ \\t] -> skip;" with input "A"', function () {
        givenGrammar(r__Q_A_Q__Q_B_Q__WS___BS_t__ARRW_skipLexer.r__Q_A_Q__Q_B_Q__WS___BS_t__ARRW_skipLexer, r__Q_A_Q__Q_B_Q__WS___BS_t__ARRW_skipParser.r__Q_A_Q__Q_B_Q__WS___BS_t__ARRW_skipParser);
        whenInput('A');
        thenExpect(["B"]);
    });

    it('should handle grammar "r: A; A: \'A\'*;" with input ""', function () {
        givenGrammar(r_A_A__Q_A_Q__STAR_Lexer.r_A_A__Q_A_Q__STAR_Lexer, r_A_A__Q_A_Q__STAR_Parser.r_A_A__Q_A_Q__STAR_Parser);
        whenInput('');
        thenExpect([]);
    });

    it('should handle grammar "r: A; A: \'A\'+;" with input ""', function () {
        givenGrammar(r_A_A__Q_A_Q__PLUS_Lexer.r_A_A__Q_A_Q__PLUS_Lexer, r_A_A__Q_A_Q__PLUS_Parser.r_A_A__Q_A_Q__PLUS_Parser);
        whenInput('');
        thenExpect(["A"]);
    });

    it('should handle grammar "r: A; A: \'A\' \'B\'* \'C\';" with input "A"', function () {
        givenGrammar(r_A_A__Q_A_Q__Q_B_Q__STAR__Q_C_Q_Lexer.r_A_A__Q_A_Q__Q_B_Q__STAR__Q_C_Q_Lexer, r_A_A__Q_A_Q__Q_B_Q__STAR__Q_C_Q_Parser.r_A_A__Q_A_Q__Q_B_Q__STAR__Q_C_Q_Parser);
        whenInput('A');
        thenExpect(["C"]);
    });

    it('should handle grammar "r: A; A: \'A\' \'B\'+ \'C\';" with input "A"', function () {
        givenGrammar(r_A_A__Q_A_Q__Q_B_Q__PLUS__Q_C_Q_Lexer.r_A_A__Q_A_Q__Q_B_Q__PLUS__Q_C_Q_Lexer, r_A_A__Q_A_Q__Q_B_Q__PLUS__Q_C_Q_Parser.r_A_A__Q_A_Q__Q_B_Q__PLUS__Q_C_Q_Parser);
        whenInput('A');
        thenExpect(["BC"]);
    });

    it('should handle grammar "r: \'A\' B; fragment B: \'B\';" with input "A"', function () {
        givenGrammar(r__Q_A_Q_B_fragmentB__Q_B_Q_Lexer.r__Q_A_Q_B_fragmentB__Q_B_Q_Lexer, r__Q_A_Q_B_fragmentB__Q_B_Q_Parser.r__Q_A_Q_B_fragmentB__Q_B_Q_Parser);
        whenInput('A');
        thenExpect([]);
    });

    it('should handle grammar "r0: r1 | r2; r1: \'AB\'; r2: \'CD\';" with input "A"', function () {
        givenGrammar(r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q_Lexer.r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q_Lexer, r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q_Parser.r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q_Parser);
        whenInput('A');
        thenExpect(["B"]);
    });

    it('should handle grammar "r0: r1 | r2; r1: \'AB\'; r2: \'AC\';" with input "A"', function () {
        givenGrammar(r0_r1_r2_r1__Q_AB_Q__r2__Q_AC_Q_Lexer.r0_r1_r2_r1__Q_AB_Q__r2__Q_AC_Q_Lexer, r0_r1_r2_r1__Q_AB_Q__r2__Q_AC_Q_Parser.r0_r1_r2_r1__Q_AB_Q__r2__Q_AC_Q_Parser);
        whenInput('A');
        thenExpect(["B", "C"]);
    });

    it('should handle grammar "r0: \'A\' \'B\';" with input "B"', function () {
        givenGrammar(r0__Q_A_Q__Q_B_Q_Lexer.r0__Q_A_Q__Q_B_Q_Lexer, r0__Q_A_Q__Q_B_Q_Parser.r0__Q_A_Q__Q_B_Q_Parser);
        whenInput('B');
        thenExpect([]);
    });

    it('should handle grammar "r0: r1 | r2; r1: \'AB\'; r2: \'CD\' \'EF\';" with input "CD"', function () {
        givenGrammar(r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q__Q_EF_Q_Lexer.r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q__Q_EF_Q_Lexer, r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q__Q_EF_Q_Parser.r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q__Q_EF_Q_Parser);
        whenInput('CD');
        thenExpect(["EF"]);
    });

    it('should handle grammar "r0: r1 | r2; r1: \'AB\'; r2: \'CD\';" with input "CD"', function () {
        givenGrammar(r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q_Lexer.r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q_Lexer, r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q_Parser.r0_r1_r2_r1__Q_AB_Q__r2__Q_CD_Q_Parser);
        whenInput('CD');
        thenExpect([]);
    });

    it('should handle grammar "r0: r1+; r1: \'ABC\' | \'ABCDE\';" with input "AB"', function () {
        givenGrammar(r0_r1_PLUS__r1__Q_ABC_Q___Q_ABCDE_Q_Lexer.r0_r1_PLUS__r1__Q_ABC_Q___Q_ABCDE_Q_Lexer, r0_r1_PLUS__r1__Q_ABC_Q___Q_ABCDE_Q_Parser.r0_r1_PLUS__r1__Q_ABC_Q___Q_ABCDE_Q_Parser);
        whenInput('AB');
        thenExpect(["C", "CDE"]);
    });

    it('should handle grammar "r0: r1+; r1: \'ABC\' | \'XYZ\';" with input "ABC"', function () {
        givenGrammar(r0_r1_PLUS__r1__Q_ABC_Q___Q_XYZ_Q_Lexer.r0_r1_PLUS__r1__Q_ABC_Q___Q_XYZ_Q_Lexer, r0_r1_PLUS__r1__Q_ABC_Q___Q_XYZ_Q_Parser.r0_r1_PLUS__r1__Q_ABC_Q___Q_XYZ_Q_Parser);
        whenInput('ABC');
        thenExpect(["ABC", "XYZ"]);
    });

    it('should handle grammar "r: F F F E D ; C: \'c\'; D: \'d\'; E: \'e\'; F: \'f\';" with input "fff"', function () {
        givenGrammar(r_FFFED_C__Q_c_Q__D__Q_d_Q__E__Q_e_Q__F__Q_f_Q_Lexer.r_FFFED_C__Q_c_Q__D__Q_d_Q__E__Q_e_Q__F__Q_f_Q_Lexer, r_FFFED_C__Q_c_Q__D__Q_d_Q__E__Q_e_Q__F__Q_f_Q_Parser.r_FFFED_C__Q_c_Q__D__Q_d_Q__E__Q_e_Q__F__Q_f_Q_Parser);
        whenInput('fff');
        thenExpect(["e"]);
    });

    it('should handle grammar "r: A B; A: \'a\'; B: \'b\'; SP: \' \' -> skip;" with input "a "', function () {
        givenGrammar(r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_skipLexer.r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_skipLexer, r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_skipParser.r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_skipParser);
        whenInput('a ');
        thenExpect(["b"]);
    });

    it('should handle grammar "r: A B; A: \'a\'; B: \'b\'; SP: \' \' -> channel(HIDDEN);" with input "a "', function () {
        givenGrammar(r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_channel_LPAR_HIDDEN_RPAR_Lexer.r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_channel_LPAR_HIDDEN_RPAR_Lexer, r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_channel_LPAR_HIDDEN_RPAR_Parser.r_AB_A__Q_a_Q__B__Q_b_Q__SP__Q__Q__ARRW_channel_LPAR_HIDDEN_RPAR_Parser);
        whenInput('a ');
        thenExpect(["b"]);
    });

    it('should handle grammar "varDecl: type ID \'=\' NUMBER \';\'; type: \'float\' | \'int\'; ID: LETTER (LETTER | [0-9])*; fragment LETTER : [a-zA-Z]; NUMBER: DIGIT+; fragment DIGIT : [0-9]; SPACES: [ \\u000B\\t\\r\\n] -> channel(HIDDEN);" with input "int a"', function () {
        givenGrammar(varDecl_typeID_Q___Q_NUMBER_Q___Q__type__Q_float_Q___Q_int_Q__ID_LETTER_LPAR_LETTER__0_9__RPAR__STAR__fragmentLETTER__a_zA_Z__NUMBER_DIGIT_PLUS__fragmentDIGIT__0_9__SPACES___BS_u000B_BS_t_BS_r_BS_n__ARRW_channel_LPAR_HIDDEN_RPAR_Lexer.varDecl_typeID_Q___Q_NUMBER_Q___Q__type__Q_float_Q___Q_int_Q__ID_LETTER_LPAR_LETTER__0_9__RPAR__STAR__fragmentLETTER__a_zA_Z__NUMBER_DIGIT_PLUS__fragmentDIGIT__0_9__SPACES___BS_u000B_BS_t_BS_r_BS_n__ARRW_channel_LPAR_HIDDEN_RPAR_Lexer, varDecl_typeID_Q___Q_NUMBER_Q___Q__type__Q_float_Q___Q_int_Q__ID_LETTER_LPAR_LETTER__0_9__RPAR__STAR__fragmentLETTER__a_zA_Z__NUMBER_DIGIT_PLUS__fragmentDIGIT__0_9__SPACES___BS_u000B_BS_t_BS_r_BS_n__ARRW_channel_LPAR_HIDDEN_RPAR_Parser.varDecl_typeID_Q___Q_NUMBER_Q___Q__type__Q_float_Q___Q_int_Q__ID_LETTER_LPAR_LETTER__0_9__RPAR__STAR__fragmentLETTER__a_zA_Z__NUMBER_DIGIT_PLUS__fragmentDIGIT__0_9__SPACES___BS_u000B_BS_t_BS_r_BS_n__ARRW_channel_LPAR_HIDDEN_RPAR_Parser);
        whenInput('int a');
        thenExpect(["="]);
    });

    it('should handle grammar "a: b | a a; b: \'B\';" with input "B"', function () {
        givenGrammar(a_b_aa_b__Q_B_Q_Lexer.a_b_aa_b__Q_B_Q_Lexer, a_b_aa_b__Q_B_Q_Parser.a_b_aa_b__Q_B_Q_Parser);
        whenInput('B');
        thenExpect(["B"]);
    });

    it('should handle grammar "r: AB; AB: A B; fragment A: \'A\' | \'a\'; fragment B: \'B\' | \'b\';" with input ""', function () {
        givenGrammar(r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Lexer.r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Lexer, r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Parser.r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Parser);
        whenInput('');
        thenExpect(["ab", "AB", "aB", "Ab"]);
    });

    it('should handle grammar "r: AB; AB: A B; fragment A: \'A\' | \'a\'; fragment B: \'B\' | \'b\';" with input ""', function () {
        givenGrammar(r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Lexer.r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Lexer, r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Parser.r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Parser);
        withCasePreference(null);
        whenInput('');
        thenExpect(["ab", "AB", "aB", "Ab"]);
    });

    it('should handle grammar "r: AB; AB: A B; fragment A: \'A\' | \'a\'; fragment B: \'B\' | \'b\';" with input ""', function () {
        givenGrammar(r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Lexer.r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Lexer, r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Parser.r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Parser);
        withCasePreference('BOTH');
        whenInput('');
        thenExpect(["ab", "AB", "aB", "Ab"]);
    });

    it('should handle grammar "r: AB; AB: A B; fragment A: \'A\' | \'a\'; fragment B: \'B\' | \'b\';" with input ""', function () {
        givenGrammar(r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Lexer.r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Lexer, r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Parser.r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Parser);
        withCasePreference('UPPER');
        whenInput('');
        thenExpect(["AB"]);
    });

    it('should handle grammar "r: AB; AB: A B; fragment A: \'A\' | \'a\'; fragment B: \'B\' | \'b\';" with input ""', function () {
        givenGrammar(r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Lexer.r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Lexer, r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Parser.r_AB_AB_AB_fragmentA__Q_A_Q___Q_a_Q__fragmentB__Q_B_Q___Q_b_Q_Parser);
        withCasePreference('LOWER');
        whenInput('');
        thenExpect(["ab"]);
    });

    it('should handle grammar "r: A B? EOF; A: \'A\'; B: \'B\';" with input "A"', function () {
        givenGrammar(r_AB_QUES_EOF_A__Q_A_Q__B__Q_B_Q_Lexer.r_AB_QUES_EOF_A__Q_A_Q__B__Q_B_Q_Lexer, r_AB_QUES_EOF_A__Q_A_Q__B__Q_B_Q_Parser.r_AB_QUES_EOF_A__Q_A_Q__B__Q_B_Q_Parser);
        whenInput('A');
        thenExpect(["B"]);
    });

});
